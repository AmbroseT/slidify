shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ls
ls()
dir()
cd("data")
gwd()
x <- read.csv("../data/ICPSR_36120/36120-manifest.txt")
x <- read.csv("./data/ICPSR_36120/36120-manifest.txt")
x <- read.csv("~/data/ICPSR_36120/36120-manifest.txt")
gwd()
getwd()
x<- read.csv("/data/ICPSR_36120/36120-manifest.txt")
?read.csv
getwd()
x<- read.csv("data/ICPSR_36120/36120-manifest.txt")
x<- read.csv("data/ICPSR_36120/36120-manifest.txt", sep="")
x<- read.csv("data/ICPSR_36120/36120-manifest.txt", sep=" ")
x<- read.csv("data/ICPSR_36120/36120-manifest.txt", sep="", header = TRUE)
x<- read.csv("data/ICPSR_36120/36120-manifest.txt", sep="", header = TRUE, blank.lines.skip = TRUE)
x<- read.csv("data/ICPSR_36120/36120-manifest.txt", sep="", header = TRUE, blank.lines.skip = TRUE, col.names = "")
x<- read.csv("data/ICPSR_36120/DS0001/36120-0001-Data.txt", sep="", header = TRUE)
x<- read.csv("data/ICPSR_36120/DS0001/36120-0001-Data.txt", header = TRUE)
head(x)
class(x)
str(x)
x<- read.csv("data/ICPSR_36120/DS0001/36120-0001-Data.txt", sep=" ", header = TRUE)
x<- read.csv("data/ICPSR_36120/DS0001/36120-0001-Data.txt", sep=",", header = TRUE)
head()
head(x)
x<- read.csv("data/ICPSR_36120/DS0001/36120-0001-Data.txt", sep="", header = TRUE)
x<- read.csv("data/ICPSR_36120/DS0001/36120-0001-Data.txt", sep="", header = FALSE)
head(x)
str(x)
x<- read.csv("data/ICPSR_36120/DS0001/36120-0001-Data.txt", sep="", header = FALSE, stringsAsFactors = FALSE)
head(x)
head(x,50)
y <- read.csv("data/ICPSR_36120/DS0002/36120-0002-Data.txt", sep="", header = FALSE, stringsAsFactors = FALSE)
str(y)
head(y)
summary(y)
z <- read.csv("data/ICPSR_36120/DS0003/36120-0003-Data.txt", sep="", header = FALSE, stringsAsFactors = FALSE)
head(z)
getwd()
x <- read.csv2("/data/ICPSR_36120/DS0003/36120-0003-Data.txt", header = FALSE, stringsAsFactors = FALSE)
x <- read.csv("/data/ICPSR_36120/DS0003/36120-0003-Data.txt", header = FALSE, stringsAsFactors = FALSE)
?read.csv2
x <- read.csv2("data/ICPSR_36120/DS0003/36120-0003-Data.txt", header = FALSE, stringsAsFactors = FALSE)
x <- read.csv("data/ICPSR_36120/DS0003/36120-0003-Data.txt", header = FALSE, stringsAsFactors = FALSE)
x <- read.csv("data/ICPSR_36120/DS0003/36120-0003-Data.txt", sep="", header = FALSE, stringsAsFactors = FALSE)
head(x)
x2 <- read.csv2("data/ICPSR_36120/DS0003/36120-0003-Data.txt", sep="", header = FALSE, stringsAsFactors = FALSE)
head(x2)
x <- read.csv("data/ICPSR_36120/DS0003/36120-0003-Data.txt", sep=" ", header = FALSE, stringsAsFactors = FALSE)
head(x)
al <- read.csv("www/al.csv", sep=",", header = TRUE, stringsAsFactors = FALSE)
al
class(al)
str(al)
crimeStates <- read.csv("www/crimeStates.csv", sep=",", header = TRUE, stringsAsFactors = FALSE)
head(crimeStates)
str(crimeStates)
qplot(crimeStates$Year, crimeStates$Violent.crime.total)
plot(crimeStates$Year, crimeStates$Violent.crime.total)
plot(crimeStates$Violent.crime.total, crimeStates$Year)
library(ggplot2)
library(ggplot2)
qplot(crimeStates$Violent.crime.total, crimeStates$Year)
qplot(crimeStates$Year, crimeStates$Violent.crime.total)
qplot(crimeStates$state, crimeStates$Violent.crime.total)
qplot(crimeStates$state, mean(crimeStates$Violent.crime.total)
)
qplot(crimeStates$state, crimeStates$Violent.crime.total)
?aggregate
aggregate(x = crimeStates, by = state, FUN = mean)
aggregate(x = crimeStates, by = crimeStates$state, FUN = mean)
aggregate(states ~ ., data = crimeStates, mean)
aggregate(state ~ ., data = crimeStates, mean)
head(aggregate(state ~ ., data = crimeStates, mean))
head(aggregate(. ~ state, data = crimeStates, mean))
head(aggregate(. ~ state + Year, data = crimeStates, mean))
stateYear <- aggregate(. ~ state + Year, data = crimeStates, mean)
head(stateYear)
head(stateYear,50)
head(stateYear,60)
aggState <- aggregate(. ~ state, data = crimeStates, mean)
head(aggState, 60)
head(crimeStates)
head(stateYear)
qplot(aggState$state, crimeStates$Violent.crime.total)
qplot(aggState$state, aggState$Violent.crime.total)
test <- aggregate(. ~ state - Year, data = crimeStates, mean)
head(test)
qplot(aggState$state, aggState$Forcible.rape)
qplot(aggState$state, aggState$Robbery)
qplot(aggState$state, aggState$Population)
qplot(aggState$Population, aggState$Violent.crime.total)
qplot(aggState$Population, aggState$Violent.Crime.rate)
qplot(aggState$Population, aggState$Forcible.rape)
aggYear <- aggregate(. ~ Year, data = crimeStates, mean)
head(aggYear)
aggYear <- aggregate(. ~ Year + state, data = crimeStates, mean)
head(aggYear)
names(crimeStates)
aggYear <- aggregate(. ~ Year, data = crimeStates[,-13], mean)
aggYear
qplot(aggYear$Year, aggYear$Violent.crime.total)
qplot(aggYear$Year, aggYear$Forcible.rape)
qplot(aggYear$Year, aggYear$Forcible.rape.rate)
library(googleVis)
library(shiny)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(crimeStates)
shiny::runApp()
aggYear
shiny::runApp()
shiny::runApp()
shiny::runApp()
aggYear
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
aggState <- aggregate(. ~ state, data = crimeStates, mean)
head(aggState)
names(crimeStates)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(crimeStates)
max(crimeStates$Violent.Crime.rate)
crimeStates[max(crimeStates$Violent.Crime.rate),]
crimeStates[crimeStates$Violent.Crime.rate ==  max(crimeStates$Violent.Crime.rate),]
shiny::runApp()
crimeStates[crimeStates$Violent.Crime.rate ==  min(crimeStates$Violent.Crime.rate),]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(crimeStates)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(crimeStates)
shiny::runApp()
shiny::runApp()
names(crimeStates)
test <- subset(crimeStates, select = (2,3))
test <- subset(crimeStates, select = (Population, Violent.crime.total))
test <- subset(crimeStates, select = c(2, 3))
head(test)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
names(crimeStates)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x <- 4
x
x <- Population
x
x <- "Population"
x
names(crimeStates)
y <- 3
y
test <- crimeStates[, c(x,y)]
test <- crimeStates[, c(2,3)]
head(test)
testNames <- c("Population", "Violent.crime.total")
testNames
test <- crimeStates[, testNames]
head(testNames)
test <- crimeStates[, names(crimeStates) %in% testNames]
head(test)
testNames <- c("Population", "Robbery")
test <- crimeStates[, names(crimeStates) %in% testNames]
head(test)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
testNames
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp("project")
shiny::runApp()
library(shinyapps)
deployApp("project")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp("project")
deployApp("project")
librar(slidify)
library(slidify)
library(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
install_github('slidify', 'ramnathv/slidify')
install_github("slidify", "ramnathv")
install_github('ramnathv/slidify',ref='dev')
`install.packages("httr")
install.packages("httr")
install.packages("httr")
install_github('slidify', 'ramnathv'
install_github('slidify', 'ramnathv')
library(devtools)
install_github('slidify', 'ramnathv')
library(httr)
library(stringi)
install.packages("stringi")
install_github('slidify', 'ramnathv')
library(slidify)
author("first_deck")
widgets     : []            # {mathjax, quiz, bootstrap}
slidify("index.Rmd")
install_version("stringr", version="0.6.2")
slidify("index.Rmd")
session_info()
devtools::install_github("muschellij2/slidify")
slidify("index.Rmd")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
slidify("index.Rmd")
library(slidify)
slidify("index.Rmd")
slidify("index.Rmd")
data(cars)
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
library(shiny)
runApp("project")
getwd()
runApp("../project")
publish_github(AmbroseT, slidify)
publish_github("AmbroseT", "slidify")
runApp("../project")
publish_github("AmbroseT", "slidify")
publish_github("AmbroseT", "slidify")
publish_github("AmbroseT", "slidify")
publish_github("AmbroseT", "slidify")
publish_github("slidify", "AmbroseT")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify('index.Rmd', options = list(framework = 'deck.js', theme = 'swiss', transition = 'horizontal-slide'))
slidify("index.Rmd")
slidify("index.Rmd")
slidify('index.Rmd', options = list(framework = 'deckjs', theme = 'swiss', transition = 'horizontal-slide')
)
?slidify
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
suppressPackageStartupMessages(library(googleVis))
dat <- read.csv("crimeStates.csv", sep=",", header = TRUE, stringsAsFactors = FALSE)
dat
slidify("index.Rmd")
T1 <- gvisTable(dat, options=list(width=200, height=270))
T1
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
?print
slidify("index.Rmd")
slidify("index.Rmd")
names(dat)
slidify("index.Rmd")
head(dat)
x <- subset(dat, Population, state)
x <- dat[, c("Population","state")]
head(x)
y <- aggregate(. ~ state, data = x, mean)
y
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
y
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
slidify("index.Rmd")
